{
  "Cannot read property" : "Check if the variable initialized correctly, the constructor is called with arguments in the proper order",
  "is not a function" : "Check if the function OR the object on which you called the function is exist and not mistyped",
  "frame" : "Frame methods usually make the entity do something based on the environments, like moving the player if one of the direction keys is pressed",
  "render" : "Render methods usually draw on the canvas",
  "PlayerShip" : "The PlayerShip entity is the ship which the players control",
  "Ammo" : "The Ammo the the base class of all the Ammos",
  "BaseAmmo" : "The BaseAmmo is a basic class extended from the Ammo",
  "LaserAmmo" : "The LaserAmmo should be fired from a BeamCannon, it attaches to an element and mimic its movements",
  "Level" : "Levels are contained in a Level Pack. They should only be created in a Level Pack",
  "LevelPack" : "Level packs contains stages, on which you can play, in an assigned order",
  "Path" : "Paths creates waypoints to the AI controlled entities",
  "LinearPath" : "LinearPath is a straight line path",
  "WavePath" : "Wavepath is a zig-zag path, based on smaller LinearPaths",
  "Projectile" : "Projectiles created from ammos, they are entities which appears on the game canvas",
  "Bean" : "Beams usually attached to something, and mimic their movement",
  "ArmedShip" : "ArmedShip is a ship variant which contains weapons and extras",
  "BaseEnemyShip": "BaseEnemyShip is a really versitale class, you can create a wide range of enemy ships with this.",
  "NCannon": "NCannon fires N projectiles at once in a wide angle",
  "CollisionHandler": "CollisionHandler checks if two entities collide, and notifies them based on their masks",
  "EntityHandler" : "EntityHandler contains the entities for the framework, it manages them, removes the ones that are out of bounds",
  "EventHandler": "EventHandler can manage event subscriptions, and notifies the registered entities when an event happens",
  "Framework": "The Framework is the soul of the game. The main loop lies here, and the start of the level loading is here too",
  "HUDHandler": "The HUDHandler draws on the second canvas, messages, informations, etc",
  "LoadingViewer": "LoadingViewer visualizes loading progress on the main canvas",
  "MaskHandler": "MaskHandler creates dynamic and static masks for entities when requested from the EntityHandler",
  "ResourceLoader": "ResourceLoader loads all of the requested resources, defined in the LevelPack.neededResources variable",
  "TimeHandler": "TimeHandler keeps track how many frames happened since the start of the game. Also you can define frame based events here"
}
